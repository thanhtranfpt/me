class Node:
    def __init__(self,name,value):
        self.name = name
        self.value = value
        self.left = None
        self.right = None
class maxHeap:
    def __init__(self):
        self.root = None
    def isEmpty(self):
        return self.root==None

    def heightofTree(self, p):
        if p is None:
            return 0
        leftHeight = self.heightofTree(p.left)
        rightHeight = self.heightofTree(p.right)
        max_height = leftHeight
        if max_height < rightHeight:
            max_height = rightHeight
        return max_height + 1

    def print_node_floor(self):
        tmp = [self.root]
        lst = []
        if tmp[0] is None:
            print('Tree is empty.')
            return
        k = 1
        i = 0
        while k <= self.heightofTree(self.root):
            print('Level', k, ': ', end=' ')
            for i in tmp:
                print(i.name,'(',i.value,')',sep='', end=' ')
                lst.append(i)
            print()
            for i in lst:
                if i in tmp:
                    if i.left is not None:
                        tmp.append(i.left)
                    if i.right is not None:
                        tmp.append(i.right)
                    tmp.remove(i)
            k = k + 1

    def addNode(self,name,value):
        p = Node(name,value)
        if self.isEmpty():
            self.root=p
            return
        #add Node not care about Heap:
        queue = [self.root]
        for k in queue:
            if k.left is None:
                k.left = p
                break
            if k.right is None:
                k.right = p
                break
            queue.append(k.left)
            queue.append(k.right)
        # makeHeap:
        tmp = self.root
        if 1==1:
            while value != self.root.value:
                #find parent node of p
                queue=[self.root]
                for k in queue:
                    if k.left.value == value:
                        child = k.left
                        parent = k
                        break
                    elif k.right.value == value:
                        child = k.right
                        parent = k
                        break
                    else:
                        queue.append(k.left)
                        queue.append(k.right)
                #check parent < p to swap:
                if parent.value > child.value:
                    return
                elif parent.value < child.value:
                    vP = parent.value
                    nP = parent.name
                    parent.value = value
                    parent.name = name
                    child.value = vP
                    child.name = nP